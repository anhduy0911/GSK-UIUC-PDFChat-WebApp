import os
import tempfile
import base64
import argparse
import box
import yaml
import streamlit as st
from streamlit_chat import message
from pdfquery import PDFQuery


st.set_page_config(page_title="GSK BIA - Chat App", layout="wide")

def display_messages():
    for i, (msg, is_user, is_extract) in enumerate(st.session_state["messages"]):
        message(msg, is_user=is_user, key=str(i), allow_html=True)
        if is_extract:
            st.download_button('Download Extracted Text', data=msg, file_name='extracted_text.txt', mime='text/plain', key=f'download_extracted_{i}')
    st.session_state["thinking_spinner"] = st.empty()


def process_input():
    if st.session_state["user_input"] and len(st.session_state["user_input"].strip()) > 0:
        message = st.session_state["user_input"]
        if message.splitlines()[0].strip().lower() == "@extract":
            user_text = "\n".join(message.splitlines()[1:]).strip('\n')
            is_extract = True
            print(user_text)
        else: 
            user_text = message.strip('\n')
            is_extract = False
        
        with st.session_state["thinking_spinner"], st.spinner(f"Thinking"):
            query_text = st.session_state["pdfquery"].ask(user_text, is_extract, use_chat_history=st.session_state["use_chat_history"])

        st.session_state["messages"].append((user_text, True, False))
        st.session_state["messages"].append((query_text, False, is_extract))


def read_and_save_file():
    '''
    callback for multiple file uploader
    '''
    # to reset the knowledge base
    st.session_state["pdfquery"].forget()  
    st.session_state["messages"] = []
    st.session_state["has_uploaded_file"] = False
    if st.session_state["temp_file_path"] != "" and os.path.exists(st.session_state["temp_file_path"]):
        os.remove(st.session_state["temp_file_path"])
    st.session_state["temp_file_path"] = ""
    st.session_state["temp_file_summary"] = ''
    st.session_state["temp_file_ext"] = ''
    st.session_state["page_num"] = 1

    file = st.session_state["file_uploader"]
    with tempfile.NamedTemporaryFile(delete=False) as tf:
        tf.write(file.getbuffer())
        file_path = tf.name

    with st.session_state["ingestion_spinner"], st.spinner(f"Ingesting {file.name}"):
        st.session_state["temp_file_summary"] = st.session_state["pdfquery"].ingest(file_path, os.path.splitext(file.name)[1])
    st.session_state["temp_file_path"] = file_path
    st.session_state["temp_file_ext"] = os.path.splitext(file.name)[1]
    st.session_state["has_uploaded_file"] = True
    st.session_state["pdfquery"].has_file = True

def reset_file():
    '''
    use for single file uploader
    '''
    # to reset the knowledge base
    st.session_state["pdfquery"].forget()  
    st.session_state["messages"] = []
    st.session_state["has_uploaded_file"] = False
    if st.session_state["temp_file_path"] != "" and os.path.exists(st.session_state["temp_file_path"]):
        os.remove(st.session_state["temp_file_path"])
    st.session_state["temp_file_path"] = ""
    st.session_state["temp_file_summary"] = ''
    st.session_state["temp_file_ext"] = ''
    st.session_state["page_num"] = 1

def write_file(file):
    '''
    use for single file uploader
    '''
    # for file in st.session_state["file_uploader"]:
    with tempfile.NamedTemporaryFile(delete=False) as tf:
        tf.write(file.getbuffer())
        file_path = tf.name

    with st.session_state["ingestion_spinner"], st.spinner(f"Ingesting {file.name}"):
        st.session_state["temp_file_summary"] = st.session_state["pdfquery"].ingest(file_path, os.path.splitext(file.name)[1])
    st.session_state["temp_file_path"] = file_path
    st.session_state["temp_file_ext"] = os.path.splitext(file.name)[1]
    st.session_state["has_uploaded_file"] = True

@st.cache_data
def displayFile(tmp_file=""):
    # Opening file from file path
    if st.session_state["temp_file_ext"] == ".pdf":
        with open(tmp_file, "rb") as f:
            base64_pdf = base64.b64encode(f.read()).decode('utf-8')
        # Embedding PDF in HTML
        file_display = F'<iframe src="data:application/pdf;base64,{base64_pdf}#page={st.session_state["page_num"]}" width="100%" height="1000" type="application/pdf">'
        # Displaying File
        st.markdown(file_display, unsafe_allow_html=True)
    elif st.session_state["temp_file_ext"] in [".docx", '.doc', '.txt']:
        st.header("File Summary - Generated by LLM")
        st.markdown(st.session_state["temp_file_summary"])

def show_upload(state:bool):
    st.session_state["uploader_visible"] = state    

def chat_page():
    with st.chat_message("system"):
        cols= st.columns((3,1,1))
        cols[0].write("Do you want to upload a file?")
        cols[1].button("yes", use_container_width=True, on_click=show_upload, args=[True])
        cols[2].button("no", use_container_width=True, on_click=show_upload, args=[False])

    if st.session_state["uploader_visible"]:
        with st.chat_message("system"):
            st.file_uploader(
                "Upload a document - Currently support text formats - pdf, docx, doc, txt",
                type=["pdf", "docx", "doc", "txt"],
                key="file_uploader",
                on_change=read_and_save_file,
                label_visibility="collapsed",
                accept_multiple_files=False,
            )
            # with st.spinner("Processing your file"):
    display_messages()
    st.chat_input('Message', key='user_input', on_submit=process_input)

@st.cache_resource(show_spinner="Initializing LLM-based Agent...")
def get_pdf_retrieval(model):
    st.session_state["pdfquery"] = PDFQuery(model_name=model)
    # create a general purpose chain first
    st.session_state["pdfquery"].has_file = False
    st.session_state["pdfquery"].ingest()

def toggle_chat_history():
    st.session_state["use_chat_history"] = not st.session_state["use_chat_history"]

def main(model):
    if len(st.session_state) == 0:
        get_pdf_retrieval(model)
        st.session_state["messages"] = []
        st.session_state["uploader_visible"] = False
        st.session_state["has_uploaded_file"] = False
        st.session_state["temp_file_path"] = ""
        st.session_state["page_num"] = 1
        st.session_state["use_chat_history"] = False
        
    st.header("GSK BIA - Chat App")

    st.session_state["use_chat_history"] = st.toggle('Toggle chat history', key='chat_history_btn', on_change=toggle_chat_history)
    st.session_state["ingestion_spinner"] = st.empty()
    chat_page()

if __name__ == "__main__":
    # from huggingface_hub import login
    # access_token_read = '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'
    # login(token = access_token_read)
    parser = argparse.ArgumentParser()
    # parser.add_argument("--model", type=str, default='TheBloke/Llama-2-13B-chat-GPTQ')
    parser.add_argument('--config', type=str, default='./cfg/llm_cfg.yml')
    # parser.add_argument("--model", type=str, default='anhduy0911/LLM_Healthcare_Information_Extraction')
    def get_config(config_path):
        # Import config vars
        with open(config_path, 'r', encoding='utf8') as ymlfile:
            cfg = box.Box(yaml.safe_load(ymlfile))
        return cfg

    
    args = parser.parse_args()
    cfg = get_config(args.config)
    main(cfg.LLM_MODEL)